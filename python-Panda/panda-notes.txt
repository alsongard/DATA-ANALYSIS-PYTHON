								#INTRODUCTION TO PANDAS
import urllib.request
urlllib.request.retreive ( web-url, file-name-location)
	import pandas as pd  #alias used in the prgm is pd
covid_df = pd.read_csv("file_path")
	to read data frm fiile use 
	Data is read and stored in a DataFrame structure which is a core object 		in Pandas library. Most variables have a suffix variableName_df
type(covid_df)
	return DataFrame structure
print(covid_df)
dataFrameVariable.info()
covid_df.info()
	the statement above is used to provide some basic information about the data frame such as the number of columns, row count and data types
dataFrameVariable.describe()
covid_df.describe()
	the describe() method is used to provide statistical information about numerical columns such as mean, standard deviation, max/min values and the number of non-empty values 
dataFrameVariable.colums()
covid_df.columns()
	the columns method is used to return the header columns within the dataFrame variable
dataFrameVariable.shape()
covid_df.shape()
	the shape return the number of rows and columns of the df object


								#RETRIEVING DATA FROM A DATA FRAME
	dataFrames in panda store data similar to a dictionary, incase of retreiving data
	example : 
	# Pandas format is simliar to this
covid_data_dict = {
    'date':       ['2020-08-30', '2020-08-31', '2020-09-01', '2020-09-02', '2020-09-03'],
    'new_cases':  [1444, 1365, 996, 975, 1326],
    'new_deaths': [1, 4, 6, 8, 6],
    'new_tests': [53541, 42583, 54395, None, None]
    'keys': ['values'//list of items of sametype]
} 
	this is the same as the dataFrameVariableObject covid_df = pd.read_csv("./file-Data/covid-data.csv")
print(covid_df)
           date  new_cases  new_deaths  new_tests //these are the keys
0    2019-12-31        0.0         0.0        NaN //these are values
1    2020-01-01        0.0         0.0        NaN //these are values
2    2020-01-02        0.0         0.0        NaN //these are values
3    2020-01-03        0.0         0.0        NaN
4    2020-01-04        0.0         0.0        NaN
..          ...        ...         ...        ...
243  2020-08-30     1444.0         1.0    53541.0
244  2020-08-31     1365.0         4.0    42583.0
245  2020-09-01      996.0         6.0    54395.0
246  2020-09-02      975.0         8.0        NaN
247  2020-09-03     1326.0         6.0        NaN


	Example of retrieving data from column  new_deaths by using the indexing notation
print(covid_df["new_deaths"])
	the data returned above will of the key new_deaths and values which are lists containing the same data type
print(type(covid_df["new_deaths"])
<class 'pandas.core.series.Series'>
	return a Series 
	each column in a dataFrame object /dataFrame is called a Series which is essentially a nump array with the same mthds and properties
	np.array(arrayName or [list_of_values])
#accessing a value based on its index
print(covid_df['new_deaths'][110])
#at() method
	pandas provide a similar method to the above by using the at[]method takes 2 arguments
print(covid_df.at[row_number, column_data]
print(covid_df.at[243, new_deaths or any column data]
#column_name
	another way to access a dataFrame column is using the name of that colum in our case
print(covid_df.new_deaths)
print(covid_df.new_cases)
print(covid_df.new_test)
	however this only works for column names which have no spaces or special characters
#retrieving several columns of data by
case_df = covid_df[['date' , 'new_cases' ]]
print(case_df)
print(case_df.shape / type(case_df) / case_df.description() / case_df.info() )
	the case_df dataFrame variable uses the same memory as that of the covid_df dataFrame variable, hence changing either values affect 	the other dataframeVariable, however these enable efficient memory use 
#copy()
	the copy() methd is used to copy data from 1 dataframe object to another and changing either value doesn't affect each other
covid_df_copy = covid_df.copy()
print(covid_df_copy)
#loc[]
	the .loc[] method is used to return data based on the given index of the row
	Example
print(dataFrame.loc[index_number])
print(covid_df.loc[243])
Using loc[] method to retrieve data : 
date          2020-08-30
new_cases         1444.0
new_deaths           1.0
new_tests        53541.0
Name: 243, dtype: object
	it return all the data of that row including the keys/header and with their values
print(type(type(covid_df.loc[234]))
#head() #tail()
	the head method is used to return a the first 5 lines of the dataFrame object or the given number of lines
print(covid_df.head() or covid_df.head(5))
	the tail method is the vice versa of the head() method
print(covid_df.tail() or covid_df.tail())
#first_valid_index()
	the method above returns the row number/index that has a valid index number and not Nan
	Nan results when the row of the comma seperated value file has no value it's empty  and not zero
print(covid_df.new_test.first_valid_index())

#loc[]
	one can also use the .loc[] to print the range of the values
print(covid_df.loc[108:133])
	returns a range of values
#sample()
	this methd return random numbers of the dataFrame Object and it takes in an argument which is the number of rows to return
print(covid_df.sample(10))


	Each retrieved row is also a Series Object
